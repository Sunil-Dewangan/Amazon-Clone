{"ast":null,"code":"export const intialState = {\n  basket: [],\n  user: null\n};\nexport const getBasketTotal = basket => basket === null || basket === void 0 ? void 0 : basket.reduce((amount, item) => item.price + amount, 0);\n\nconst reducer = (state, action) => {\n  console.log(action);\n\n  switch (action.type) {\n    case \"set_user\":\n      return { ...state,\n        user: action.user\n      };\n\n    case \"Add_to_Basket\":\n      /*logic for add items to basket*/\n      return { ...state,\n        basket: [...state.basket, action.item]\n      };\n\n    case \"Remove_from_Basket\":\n      /*logic for removing items from basket*/\n      let newBasket = [...state.basket];\n      const index = state.basket.findIndex(basketItem => basketItem.id === action.id);\n\n      if (index >= 0) {\n        //item exist in basket, remove it\n        newBasket.splice(index, 1);\n      } else {\n        console.warn('cannot remove product (id: ${action.id}) as it is not in basket');\n      }\n\n      return { ...state,\n        basket: newBasket\n      };\n\n    default:\n      return state;\n  }\n};\n\nexport default reducer;","map":{"version":3,"sources":["D:/React/Practice/NPM React/Amazon-clone/amazon-clone/src/reducer.js"],"names":["intialState","basket","user","getBasketTotal","reduce","amount","item","price","reducer","state","action","console","log","type","newBasket","index","findIndex","basketItem","id","splice","warn"],"mappings":"AAAA,OAAO,MAAMA,WAAW,GAAG;AACvBC,EAAAA,MAAM,EAAE,EADe;AAEvBC,EAAAA,IAAI,EAAE;AAFiB,CAApB;AAKP,OAAO,MAAMC,cAAc,GAAIF,MAAD,IAC9BA,MAD8B,aAC9BA,MAD8B,uBAC9BA,MAAM,CAAEG,MAAR,CAAe,CAACC,MAAD,EAASC,IAAT,KAAkBA,IAAI,CAACC,KAAL,GAAaF,MAA9C,EAAsD,CAAtD,CADO;;AAGP,MAAMG,OAAO,GAAG,CAACC,KAAD,EAAQC,MAAR,KAAmB;AAC/BC,EAAAA,OAAO,CAACC,GAAR,CAAYF,MAAZ;;AACA,UAAQA,MAAM,CAACG,IAAf;AACI,SAAK,UAAL;AACI,aAAM,EACF,GAAGJ,KADD;AAEFP,QAAAA,IAAI,EAAEQ,MAAM,CAACR;AAFX,OAAN;;AAIJ,SAAK,eAAL;AACA;AACI,aAAO,EACH,GAAGO,KADA;AAEHR,QAAAA,MAAM,EAAE,CAAC,GAAGQ,KAAK,CAACR,MAAV,EAAkBS,MAAM,CAACJ,IAAzB;AAFL,OAAP;;AAKJ,SAAK,oBAAL;AACA;AACI,UAAIQ,SAAS,GAAG,CAAC,GAAGL,KAAK,CAACR,MAAV,CAAhB;AACA,YAAMc,KAAK,GAAGN,KAAK,CAACR,MAAN,CAAae,SAAb,CAAwBC,UAAD,IAAgBA,UAAU,CAACC,EAAX,KAAkBR,MAAM,CAACQ,EAAhE,CAAd;;AAEA,UAAIH,KAAK,IAAE,CAAX,EAAc;AACV;AACAD,QAAAA,SAAS,CAACK,MAAV,CAAiBJ,KAAjB,EAAwB,CAAxB;AAEH,OAJD,MAIO;AACHJ,QAAAA,OAAO,CAACS,IAAR,CACI,iEADJ;AAGH;;AAED,aAAO,EACH,GAAGX,KADA;AAEHR,QAAAA,MAAM,EAAEa;AAFL,OAAP;;AAKJ;AACI,aAAOL,KAAP;AAlCR;AAoCH,CAtCD;;AAwCA,eAAeD,OAAf","sourcesContent":["export const intialState = {\r\n    basket: [],\r\n    user: null,\r\n};\r\n\r\nexport const getBasketTotal = (basket) =>\r\nbasket?.reduce((amount, item) => item.price + amount, 0);\r\n\r\nconst reducer = (state, action) => {\r\n    console.log(action);\r\n    switch (action.type) {\r\n        case \"set_user\":\r\n            return{\r\n                ...state,\r\n                user: action.user,\r\n            }\r\n        case \"Add_to_Basket\" :\r\n        /*logic for add items to basket*/\r\n            return {                \r\n                ...state,\r\n                basket: [...state.basket, action.item],               \r\n            };\r\n           \r\n        case \"Remove_from_Basket\" :\r\n        /*logic for removing items from basket*/\r\n            let newBasket = [...state.basket];\r\n            const index = state.basket.findIndex((basketItem) => basketItem.id === action.id);\r\n\r\n            if (index>=0) {\r\n                //item exist in basket, remove it\r\n                newBasket.splice(index, 1);\r\n                \r\n            } else {\r\n                console.warn(\r\n                    'cannot remove product (id: ${action.id}) as it is not in basket'\r\n                )\r\n            }\r\n        \r\n            return {\r\n                ...state,\r\n                basket: newBasket,\r\n            };\r\n            \r\n        default:\r\n            return state;\r\n    }\r\n}\r\n\r\nexport default reducer;"]},"metadata":{},"sourceType":"module"}